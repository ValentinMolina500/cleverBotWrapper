{"version":3,"sources":["components/TextCards/TextCards.js","components/TextDisplay/TextDisplay.js","components/BottomBar/BottomBar.js","components/EntryPoint/EntryPoint.js","App.js","serviceWorker.js","index.js"],"names":["TextCards","formatted","this","props","text","charAt","toUpperCase","slice","react_default","a","createElement","className","type","Component","TextDisplay","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","prevProps","id","dialog","map","val","index","TextCards_TextCards","assign","key","BottomBar","onClick","speak","isSpeaking","cancel","EntryPoint","_this","state","setState","objectSpread","recognition","start","setupRecognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","lang","interimResults","maxAlternatives","onresult","event","response","results","transcript","console","log","push","input","encodeURIComponent","fetch","url","API_KEY","then","_ref","asyncToGenerator","regenerator_default","mark","_callee","res","voices","utterThis","wrap","_context","prev","next","json","sent","synth","getVoices","SpeechSynthesisUtterance","output","voice","cs","stop","_x","apply","arguments","onend","speechCancel","abort","speechSynthesis","latestText","React","createRef","TextDisplay_TextDisplay","latest","BottomBar_BottomBar","App","EntryPoint_EntryPoint","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5528325a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class TextCards extends Component {\r\n    render() {\r\n    const formatted = this.props.text.charAt(0).toUpperCase() + this.props.text.slice(1);\r\n\r\n        return (\r\n            <div className={this.props.type === 'input' ? 'input-card' : 'response-card'}>\r\n                <div className=\"text\">\r\n                    <h1 className=\"header\">{this.props.type === 'input' ? 'You said: ' : 'AI said: '}</h1>\r\n                    <h2>{formatted}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport TextCards from \"../TextCards/TextCards\";\r\n\r\nexport default class TextDisplay extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n  }\r\n  render() {\r\n    return ( \r\n      <div id=\"text-container\">\r\n        <div >\r\n          {this.props.dialog.map((val, index) => {\r\n            return <TextCards key={index}  id={index} {...val}/>\r\n          })} \r\n        </div> \r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class BottomBar extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"bottom-bar\">\r\n                <div className=\"button-container\">\r\n                    <button onClick={this.props.speak} className=\"speak-button\">{this.props.isSpeaking ? 'Recording...' : 'Say Something'}</button>\r\n                    <button onClick={this.props.cancel} className=\"speak-button\">Cancel</button>\r\n                </div>\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}","import React, {\r\n  Component\r\n} from 'react';\r\nimport TextDisplay from \"../TextDisplay/TextDisplay\";\r\nimport BottomBar from \"../BottomBar/BottomBar\";\r\n\r\nexport default class EntryPoint extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dialog: [],\r\n      recognition: this.setupRecognition(),\r\n      cs: '',\r\n      API_KEY: 'CC8srKyiHqx77hURUxkjduSJnCw',\r\n      synth: window.speechSynthesis,\r\n      isSpeaking: false,\r\n    }\r\n\r\n    this.latestText = React.createRef();\r\n  }\r\n\r\n  speak = () => {\r\n    if(!this.state.isSpeaking) {\r\n      this.setState({\r\n        ...this.state,\r\n        isSpeaking: true\r\n      })\r\n      this.state.recognition.start();\r\n    }\r\n  }\r\n\r\n  setupRecognition = () => {\r\n    let recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition)();\r\n    recognition.lang = 'en-US';\r\n    recognition.interimResults = false;\r\n    recognition.maxAlternatives = 5;\r\n\r\n    recognition.onresult = event => {\r\n      const response = event.results[0][0].transcript;\r\n      console.log(response);\r\n      let dialog = this.state.dialog;\r\n\r\n      dialog.push({\r\n        type: 'input',\r\n        text: response,\r\n      })\r\n      this.setState({\r\n        ...this.state,\r\n        isSpeaking: false,\r\n        dialog: dialog\r\n      });\r\n\r\n      let input = encodeURIComponent(response);\r\n\r\n      let url = \"https://www.cleverbot.com/getreply\";\r\n\r\n      fetch(url + '?key=' + this.state.API_KEY + '&input=' + input)\r\n        .then(async (res) => {\r\n          let response = await res.json();\r\n          var voices = this.state.synth.getVoices();\r\n          console.log(response);\r\n\r\n\r\n          const utterThis = new SpeechSynthesisUtterance(response.output);\r\n          utterThis.voice = voices[5];\r\n\r\n          this.state.synth.speak(utterThis);\r\n\r\n          let dialog = this.state.dialog;\r\n          \r\n          dialog.push({\r\n            type: 'response',\r\n            text: response.output\r\n          })\r\n\r\n          this.setState({\r\n            ...this.state,\r\n            cs: response.cs,\r\n            dialog: dialog\r\n          });\r\n\r\n          this.speak();\r\n        });\r\n    }\r\n\r\n    recognition.onend = () => {\r\n      this.setState({\r\n        ...this.state,\r\n        isSpeaking: false\r\n      });\r\n    }\r\n\r\n    return recognition;\r\n  }\r\n\r\n  speechCancel = () => {\r\n    this.state.recognition.abort();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TextDisplay dialog={this.state.dialog} latest={this.latestText}/>\r\n        <BottomBar isSpeaking={this.state.isSpeaking} speak={this.speak} cancel={this.speechCancel}/>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport EntryPoint from \"./components/EntryPoint/EntryPoint\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <EntryPoint />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}